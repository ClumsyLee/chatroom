#!/usr/bin/env node

/**
 * Module dependencies.
 */

const {sessionSecret, sessionStore, app} = require('../app');
const debug = require('debug')('chatroom:server');
const http = require('http');
const socketIo = require('socket.io');
const passportSocketIo = require('passport.socketio');

const Message = require('../models/message');
const DEFAULT_ROOM = 'general';

let usernames = new Set();

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);
let io = socketIo(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Setup socket.io.

io.use(passportSocketIo.authorize({
  key: 'connect.sid',
  secret: sessionSecret,
  store: sessionStore,
}));

io.on('connection', (socket) => {
  const user = socket.request.user;
  if (user) {
    socket.join(DEFAULT_ROOM, (err) => {
      if (err) {
        throw err;
      }
      debug(`${user.username} joined room "${DEFAULT_ROOM}".`);

      usernames.add(user.username);
      io.in(DEFAULT_ROOM).emit('usernames', Array.from(usernames));
    });

    socket.on('message-body', (body) => {
      debug(`${user.username} sent "${body}" to room "${DEFAULT_ROOM}".`);

      let message = new Message();
      message.username = user.username;
      message.createdAt = new Date();
      message.body = body;

      message.save((err) => {
        if (err) {
          throw err;
        }

        debug(`Message "${message}" saved.`);
      });

      io.in(DEFAULT_ROOM).emit('message', message);
    });

    socket.on('disconnect', () => {
      debug(`${user.username} left room "${DEFAULT_ROOM}".`);

      usernames.delete(user.username);
      io.in(DEFAULT_ROOM).emit('usernames', Array.from(usernames));
    });
  }
});
